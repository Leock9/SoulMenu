
services:
  soulmenu.api:
    image: ${DOCKER_REGISTRY-}soulmenuapi
    build:
      context: src
      dockerfile: Dockerfile
    ports:
      - "8080:8080"

  soulmenu.consumer:
    image: ${DOCKER_REGISTRY-}soulmenuconsumer
    build:
      context: .
      dockerfile: SoulMenu.Consumer/Dockerfile

  # pgdb-soulmenu:
  #   image: postgres:latest
  #   environment:
  #     POSTGRES_DB: dbSoulMenu
  #     POSTGRES_USER: pass
  #     POSTGRES_PASSWORD: pass45455627
  #     POSTGRES_PORT: 5432
  #   volumes:
  #     - postgres_data_soul:/var/lib/postgresql/data
  #   ports:
  #     - "5432:5432"
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U pass -d dbSoulMenu"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #   restart: unless-stopped

  # pgadmin:
  #   image: dpage/pgadmin4
  #   environment:
  #     PGADMIN_DEFAULT_EMAIL: "pass@pass.com"
  #     PGADMIN_DEFAULT_USER: pass
  #     PGADMIN_DEFAULT_PASSWORD: pass45455627
  #   ports:
  #     - "5050:80"
  #   depends_on:
  #     - pgdb-soulmenu
  #   volumes:
  #   - "./servers.json:/pgadmin4/servers.json"

  # zap:
  #   image: zaproxy/zap-stable
  #   command: >
  #     zap-api-scan.py -t http://soulmenu.api:8080/itemMenu -f openapi -r api-scan-report.html
  #   ports:
  #     - "8090:8090"
  #   volumes:
  #     - ./reports:/zap/wrk
  #   depends_on:
  #     - soulmenu.api

  # rabbitmq:
  #   image: rabbitmq:3-management-alpine
  #   container_name: rabbitmq
  #   restart: always
  #   ports:
  #     - "5672:5672"  # Porta para AMQP
  #     - "15672:15672"  # Porta para o painel de controle do RabbitMQ (opcional, para acesso ao RabbitMQ Management)
  #   environment:
  #     RABBITMQ_DEFAULT_USER: "guest"  
  #     RABBITMQ_DEFAULT_PASS: "guest"  
  #   volumes:
  #     - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
  #     - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
  #   healthcheck:
  #     test: ["CMD", "rabbitmqctl", "status"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5




